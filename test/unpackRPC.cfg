# do setenv POOL_CATALOG file:rpccatalog.xml first!
process TEST = {
       source = PoolSource {
     	     untracked vstring fileNames = {
     	   //  'file:/afs/cern.ch/user/s/segoni/scratch0/rpcTempData/RawData106_8_22_10_xx_3bx.root'
 	   //'file:/tmp/segoni/mtcc.00003598.A.testStorageManager_0.6.root'
 	   'frio:/castor/cern.ch/cms/MTCC/data/00003596/A/mtcc.00003596.A.testStorageManager_0.4.root'
    	     }
     	     untracked int32 maxEvents = -1
       }

//	source = NewEventStreamFileReader{
//			untracked vstring fileNames = {
//		 		'/tmp/segoni/mtcc.00003596.A.testStorageManager_0.4.root'
// 			}
//			string fileName = "teststreamfile.dat"
//			int32 max_event_size = 7000000
//			int32 max_queue_depth = 5
//			untracked int32 maxEvents = -1
//		}

      
      es_source = PoolDBESSource { 
                      VPSet toGet = {
                        { string record = "RPCReadOutMappingRcd"
                          string tag = "RPCReadOutMapping_v1"
                        } 
                      }
                      bool loadAll = true
                      string timetype = "runnumber" 
                      
		      string connect = "sqlite_file:cabling-MTCC-2-1.db"
                      untracked string catalog = "file:cablingCatalog-MTCC-2-1.xml"
                      
		      //string connect = "sqlite_file:cabling.db"
                      //untracked string catalog = "file:cablingCatalog.xml"
                    }


	module rpcunpacker = RPCUnpackingModule{
                untracked bool PrintOut = true  
                untracked bool runDQM = false
		untracked bool DQMSaveRootFile = true
		untracked int32 EventsIntervalForRootFile = 5
		untracked string RootFileName ="RPCMonitorModule.root"

	}
	
	module rpcdigimonitoring = RPCMonitorDigi{
		untracked string moduleLogName = "RpcDigiMonitor"
		untracked bool DigiDQMSaveRootFile = true
		untracked int32 DigiEventsInterval = 1000
	}
	

        include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
        include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
        include "Geometry/RPCGeometry/data/rpcGeometry.cfi"

	# The module for 1D RPC RecHit building
	include "RecoLocalMuon/RPCRecHit/data/RPCRecHit.cfi"
	replace rpcRecHits.rpcDigiLabel = "rpcunpacker"
        service = RPCMonitor{
	     untracked bool DQMVerbosity = false
	     untracked bool DQMSaveRootFile = false
	     untracked int32 EventsInterval = 10000
             untracked string RootFileName ="RPCMonitorModule.root"
	}

        service = DaqMonitorROOTBackEnd{}

        service = MonitorDaemon{
		# if true, will automatically start DQM thread in background
        	untracked bool AutoInstantiate=false
        	# if >=0, upon a connection problem, the source will automatically
        	# attempt to reconnect with a time delay (secs) specified here
        	# (default: 5)
        	untracked int32 reconnect_delay = 5
        	# collector hostname; examples:localhost(default),lxcmse2.cern.ch, etc
        	untracked string DestinationAddress = "lxplus063.cern.ch"
        	# port for communicating with collector (default: 9090)
        	untracked int32 SendPort = 9090
        	# monitoring period in ms (i.e. how often monitoring elements
        	# are shipped to the collector; default: 1000)
        	untracked int32 UpdateDelay = 1000
        	# name of DQM source (default: DQMSource)
        	untracked string NameAsSource = "FU0"
        }

	service = MessageLogger {
    		untracked vstring destinations = {"RpcMonitoring.log"}
               # PSet RpcUnpacker.log     = {untracked bool noLineBreaks = true   }
               # PSet detailedInfo.txt = {untracked int32  lineLength = 132    } 
       }


	
        module out = PoolOutputModule {
               untracked string fileName ="RPCDigiHits.root"
        }
	
	path p = {rpcunpacker,rpcRecHits,rpcdigimonitoring} 
	endpath e = {out }
}
