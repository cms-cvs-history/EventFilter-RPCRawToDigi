# do setenv POOL_CATALOG file:rpccatalog.xml first!
process TEST = {
	source = PoolRASource {
		untracked vstring fileNames = {
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root',
		'file:00000001_FilterUnitFramework_0_0.root'
		}
                untracked int32 maxEvents = -1
	}


	module rpcunpacker = RPCUnpackingModule{
                untracked bool PrintOut = true  
                untracked bool runDQM = false
		untracked bool DQMSaveRootFile = false
		untracked int32 EventsIntervalForRootFile = 100
		untracked string RootFileName ="RPCMonitorModule.root"
	}
	
	module rpcdigimonitoring = RPCMonitorDigi{
		untracked string moduleLogName = "provadimonitoring"
		untracked bool DigiDQMSaveRootFile = false
		untracked int32 DigiEventsInterval = 100
	}
	
        service = RPCMonitor{
	     untracked bool DQMVerbosity = true
	     untracked bool DQMSaveRootFile = false
	     untracked int32 EventsInterval = 100
	}

        service = DaqMonitorROOTBackEnd{}

        service = MonitorDaemon{
		# if true, will automatically start DQM thread in background
        	untracked bool AutoInstantiate=false
        	# if >=0, upon a connection problem, the source will automatically
        	# attempt to reconnect with a time delay (secs) specified here
        	# (default: 5)
        	untracked int32 reconnect_delay = 5
        	# collector hostname; examples:localhost(default),lxcmse2.cern.ch, etc
        	untracked string DestinationAddress = "lxplus063.cern.ch"
        	# port for communicating with collector (default: 9090)
        	untracked int32 SendPort = 9090
        	# monitoring period in ms (i.e. how often monitoring elements
        	# are shipped to the collector; default: 1000)
        	untracked int32 UpdateDelay = 1000
        	# name of DQM source (default: DQMSource)
        	untracked string NameAsSource = "FU0"
        }

	service = MessageLogger {
    		untracked vstring destinations = {"RpcUnpacker.log"}
		untracked PSet RpcUnpacker.log = {untracked  bool noLineBreaks = true   }
                untracked PSet detailedInfo.txt = {untracked  int32  lineLength = 132    } 
	}

	es_source = PoolDBESSource { VPSet toGet = 
                                    {
                                     { string record = "RPCReadOutMappingRcd"
                                       string tag    = "rpcrotest"
                                     } 
                                    }
		    		    bool loadAll = true
                                    string connect = "sqlite_file:RPCReadOutMap.db"
			            string timetype = "runnumber" 
				   }
	
	module get = EventSetupRecordDataGetter 
                     { 
                       VPSet toGet = 
                       {
	                 {
                           string record = "RPCReadOutMappingRcd"
	                   vstring data = {"RPCReadOutMapping"} 
                         }  
	               }
	               untracked bool verbose = true 
	              }
	
	#module out = PoolOutputModule {
	#	untracked string fileName ="digi.root"
	#}
	#add module "get" when mapping works 
	path p = {rpcunpacker}
}
